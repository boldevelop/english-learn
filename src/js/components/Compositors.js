import React from 'react';
import {Group, CardGrid, InfoRow, Progress, Title, Banner, Avatar, Div} from "@vkontakte/vkui";
import {useDispatch, useSelector} from "react-redux";
import {setSelectedCompositorsSong} from "../actions";
import {getCompleteTasksOfComp} from "../helpers";
import Card from "@vkontakte/vkui/dist/components/Card/Card";

const identifyEmojiByType = (type) => {
    switch (type) {
        case 'rap':
            return ' ü§ôüèø'
        case 'pop':
            return ' üï∫üèΩ'
        case 'star':
            return ' üî•'
        case 'popular':
            return ' üí•'
        default:
            return ''
    }
}

export const Compositors = () => {
    const compositors = useSelector(state => state.compositors)
    const progress = useSelector(state => state.progress)
    const dispatch = useDispatch()

    return !!compositors.length && (
        <Group separator="hide">
            <CardGrid>
                <Card size="l">
                    <Div>
                        <div><span role='img' aria-label="ear">üëÇ</span> –í—ã–±–∏—Ä–∞–π —Å–≤–æ–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è </div>
                        <div><span role='img' aria-label="student hat">üéì</span> –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ç—Ä–µ–∫–æ–≤ </div>
                        <div><span role='img' aria-label="hands">üôå</span> –î–µ–ª–∏—Å—å —Å–≤–æ–µ–π –ª—é–±–∏–º–æ–π —Å—Ç—Ä–æ—á–∫–æ–π –≤ –∏—Å—Ç–æ—Ä–∏—é </div>
                        <div><span role='img' aria-label="wink">üòâ</span> –ò –µ—â–µ –º–æ–∂–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ–≥–æ –ø–µ—Å–Ω—é </div>
                    </Div>
                </Card>
            </CardGrid>
            <CardGrid>
                {compositors.map(compositor => {
                    let progressValue
                    let numberOfTasks
                    let completeIds

                    let actions = null
                    let subheader = null

                    if (progress.length) {
                        numberOfTasks = compositor.taskLength;
                        completeIds = getCompleteTasksOfComp(progress, compositor.id)
                        progressValue = completeIds.length / numberOfTasks * 100

                        const completeClass = completeIds.length === numberOfTasks ? 'custom-progress_complete' : ''
                        subheader = `–í—ã–ø–æ–ª–Ω–µ–Ω–æ ${completeIds.length} –∏–∑ ${numberOfTasks}`

                        actions = (
                            <InfoRow>
                                <Progress value={progressValue} className={`custom-progress ${completeClass}`}/>
                            </InfoRow>
                        )
                    }

                    const header = <Title level="1" weight="regular" style={{marginBottom: 22}}>
                        {compositor.name} {identifyEmojiByType(compositor.type)}
                    </Title>

                    return (
                        <Banner
                            className={'custom-banner'}
                            key={compositor.id}
                            mode="tint"
                            asideMode="expand"
                            before={<Avatar size={72} src={`./img/comp-${compositor.id}.jpg`} />}
                            onClick={() => dispatch(setSelectedCompositorsSong(compositor))}
                            header={header}
                            subheader={subheader}
                            actions={actions}
                        />
                    )
                })}
            </CardGrid>
        </Group>
    )
}
